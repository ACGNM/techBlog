<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Day Day Up</title><link>/techBlog/</link><description>Recent content on Day Day Up</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 07 Mar 2021 21:03:15 +0900</lastBuildDate><atom:link href="/techBlog/index.xml" rel="self" type="application/rss+xml"/><item><title>Sprint_guide</title><link>/techBlog/posts/sprint_guide/</link><pubDate>Sun, 07 Mar 2021 21:03:15 +0900</pubDate><guid>/techBlog/posts/sprint_guide/</guid><description>学习spring的基本知识找不到好的课程所以跟着官方Guides学习
1.建立一个resful服务
为了学习基础知识，不使用Github上的工程文件，使用spring initializr来建立工程的框架 https://start.spring.io/
指定各项参数：
Project: 选择使用Maven还是Gradle来管理工程（和依赖）。个人一般使用Maven所以使用Maven Spring Boot 一般选择使用默认的版本 Project Metadata Group 所在组织名，一般是网址的逆序 Artifact 工程的名字，会用于最后生成的jar或者war的命名上 其余自动生成 Packaging 选择最后将工程打包成哪种格式的包 JAVA 选择使用的JAVA版本 Dependencies 选择使用的依赖 指定好各项参数后在下载之前先点击EXPLORE来预览一下生成的POM.xml文件的内容是否正确
使用趁手的编译器来建立工程。我使用的是IDEA IntelliJ，在公司也使用同种编译器体验不错。
Create New Project -&amp;gt; Maven -&amp;gt; Groupd和ArtifactId与之前spring initializr的一致即可，版本因为是demo所以不用太在意如果需要版本方面的知识可以参考语义化版本 -&amp;gt; 接下来选择工程位置即可 然后将spring initializr上下载来的压缩包解压复制里面的POM文件到工程的POM文件中。之后一般IDEA会开始自动下载依赖与构建工程。
从spring initializr下载的压缩包里有个mvnw.cmd文件，里面存储着简易的Maven执行命令脚本（比起mvn命令更简单）。
首先为了可以在IDEA的Terminal中可以运行./mvnw 命令需要安装Maven的运行环境。我是Mac OS所以直接brew install mvn。 然后在工程根目录下（或者直接在IDEA的Terminal中）运行mvn -N io.</description></item><item><title>Spring</title><link>/techBlog/posts/spring_restful/</link><pubDate>Sun, 07 Mar 2021 20:57:51 +0900</pubDate><guid>/techBlog/posts/spring_restful/</guid><description>Building REST services with Spring 建立雇员类(Employee.java) 使用JPA的@Entity注解来进行数据存储的准备。 id, name, role都是领域对象模型。其中id被指定为主键并且自动由JPA provider生成。 当需要一个新的员工实例时会创建一个构造函数，但是此时还没有创建id。 使用JPA时建立雇员仓库(EmployeeRepository)来进行与数据库的交互 建立一个接口继承JpaRepository类。domain雷星设置为Employee，id类型设置为long。 仓库式的方法(repository solution)可以回避基于特定语言的数据存储方式。 Spring Boot的入口是一个public static void main类型的，并且在需要Spring Boot行使其作用的地方使用@SpringBootApplication注释。 @SpringBootApplication是一个元注释，用来component scanning, autoconfiguration, and property support。本质就是用来启动一个容器并且使服务开始运行。 建立一个数据交互类LoadDatabase.java 程序做的事： 当Application的内容加载时Spring Boot会运行所有的CommandLineRunner bean。 这个运行类会请求一个EmployeeRepository的拷贝。 建立了两个实体并且存储了它们。 HTTP平台 为了能从网络层获取数据，现在将目光转向Spring MVC。建立控制器类EmployeeController.java。 代码解说 @RestController表示函数返回的结果直接写入响应而不是渲染模板。 EmployeeRepository在controller的构造函数中被注入。 对应HTTP的各种请求方式，存在各种操作的路由。(GET, POST, PUT, and DELETE) EmployeeNotFoundException用来表示查找失败的意外。 在抛出EmployeeNotFoundException例外之后添加Spring MVC的设置(advice)来生成HTTP 404响应。 意外抛出的解说 @ResponseBody表示这个advice直接写入响应体。 @ExceptionHandler指定这个advice只有抛出EmployeeNotFoundException时才会被调用。 @ResponseStatus指定了抛出一个HttpStatus.</description></item><item><title>Udemy Docker learning</title><link>/techBlog/posts/docker_learning/</link><pubDate>Sun, 07 Mar 2021 19:53:41 +0900</pubDate><guid>/techBlog/posts/docker_learning/</guid><description>Section3 执行启动容器命令之后会发生什么 执行docker container run --publish 80:80 --name webhost --detach nginx之后发生的：
在本地的image cache中寻找 如果本地找不到匹配的image，则在远程的image repo中寻找（默认为Docker Hub） 下载寻找到的image最新版本 以下载好的image为基础创建一个容器container 在docker engine的private network中创建一个虚拟IP 打开主机（host）的80端口连接转发至容器的80端口 如果不用--publish选项则不会打开任何端口 使用image Dockerfile中的CMD启动容器 --detach使得container在后台运行，不接收输入与输出。 重新进入交互模式使用docker attach(需要有正在运行的bash，退出container也停止)，或者docker exec -it(退出container不停止) 参考1 参考2 Container VS. VM container不是mini VM（与VM基本没有相似之处） 只是进程（process） 被限制在其能访问的资源中 进程停止则退出 相关命令解说 docker top列出在特定的容器中执行的进程 ps aux可以发现同样的进程可以在主机系统中查询到 所以容器是一个进程
监视 docker container top 同上 docker container inspect列出启动容器时所用的设置（JSON格式）等元数据 docker container stats监视容器运行状态（CPU使用和内存等） 进入容器内部 docker container run -it以交互的方式启动容器 -t创建一个虚拟的tty -i使得会话开放来接收终端输入（keep session open to receive terminal input） 末尾可以加入想运行的命令，比如bash e.</description></item></channel></rss>